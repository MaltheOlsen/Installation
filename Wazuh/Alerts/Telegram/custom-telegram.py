#!/usr/bin/env python

import sys
import json
import requests
import base64 # Important for Base64 encoding

# --- Configuration ---
CHAT_ID = "XXX" # <<< IMPORTANT: Replace with your actual Chat ID

# --- Helper Functions ---

# Function to escape backslashes, backticks, dots, hyphens, AND PARENTHESES for content going into inline code blocks.
# This is the most aggressive escaping for inline code based on the errors you've observed.
def escape_markdown_v2_literal_in_code(text):
    text = text.replace('\\', '\\\\') # Escape backslashes first
    text = text.replace('`', '\\`')   # Escape backticks
    text = text.replace('.', '\\.')   # Escape dot/period (from previous error)
    text = text.replace('-', '\\-')   # Escape hyphen (from previous error)
    text = text.replace('(', '\\(')   # Escape opening parenthesis
    text = text.replace(')', '\\)')   # Escape closing parenthesis
    return text

# Function to sanitize log content for MarkdownV2 multiline code blocks.
# This version uses BASE64 encoding for full_log to avoid any character parsing issues within the block.
def sanitize_for_markdown_code_block(text):
    text = text.replace('\r\n', '\n').replace('\r', '\n') # Normalize newlines
    # Base64 encode the log content to avoid any character parsing issues
    encoded_text = base64.b64encode(text.encode('utf-8')).decode('utf-8')
    return f"Base64 Encoded Log (for debugging):\n{encoded_text}"

# --- Main Script Logic ---
if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("Usage: custom-telegram.py <alert_file> <active_response_name> <telegram_api_url>", file=sys.stderr)
        sys.exit(1)

    alert_file_path = sys.argv[1]
    hook_url = sys.argv[3]

    try:
        with open(alert_file_path, 'r') as alert_file:
            alert_json = json.loads(alert_file.read())
    except FileNotFoundError:
        print(f"Error: Alert file not found at {alert_file_path}", file=sys.stderr)
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from alert file {alert_file_path}: {e}", file=sys.stderr)
        sys.exit(1)

    # --- Extract and Sanitize Data Fields ---
    rule_id = str(alert_json.get('rule', {}).get('id', "N/A"))
    alert_level = str(alert_json.get('rule', {}).get('level', "N/A"))
    description = str(alert_json.get('rule', {}).get('description', "N/A"))
    timestamp = str(alert_json.get('timestamp', "N/A"))

    agent_name = str(alert_json.get('agent', {}).get('name', "N/A"))
    agent_id = str(alert_json.get('agent', {}).get('id', "N/A"))
    location = str(alert_json.get('location', "N/A"))

    full_log_raw = str(alert_json.get('full_log', "N/A"))

    # Use the updated escaping for content going into inline code blocks (now includes dot, hyphen, and parentheses escaping).
    escaped_rule_id = escape_markdown_v2_literal_in_code(rule_id)
    escaped_alert_level = escape_markdown_v2_literal_in_code(alert_level)
    escaped_description = escape_markdown_v2_literal_in_code(description)
    escaped_timestamp = escape_markdown_v2_literal_in_code(timestamp)
    escaped_agent_name = escape_markdown_v2_literal_in_code(agent_name)
    escaped_agent_id = escape_markdown_v2_literal_in_code(agent_id)
    escaped_location = escape_markdown_v2_literal_in_code(location)

    # For full_log, apply the BASE64 encoding and wrap it in code block formatting.
    sanitized_full_log = sanitize_for_markdown_code_block(full_log_raw)

    # Define alert severity emojis
    severity_emojis = {
        '0': '‚ö™Ô∏è', '1': 'üü¢', '2': 'üîµ', '3': 'üü°', '4': 'üü†',
        '5': 'üî¥', '6': 'üö®', '7': 'üö®', '8': 'üö®', '9': 'üö®',
        '10': '‚ÄºÔ∏è', '11': '‚ÄºÔ∏è', '12': '‚ÄºÔ∏è', '13': '‚ÄºÔ∏è', '14': '‚ÄºÔ∏è', '15': '‚ÄºÔ∏è'
    }
    alert_emoji = severity_emojis.get(alert_level, '‚ö™Ô∏è')

    # --- Construct Telegram Message ---
    msg_data = {}
    msg_data['chat_id'] = CHAT_ID

    message_text = f"""
{alert_emoji} *Wazuh Alert Detected\\!* {alert_emoji}

*Description:* `{escaped_description}`

*Details:*
‚Ä¢ *Rule ID:* `{escaped_rule_id}`
‚Ä¢ *Level:* `{escaped_alert_level}`
‚Ä¢ *Timestamp:* `{escaped_timestamp}`
‚Ä¢ *Agent:* `{escaped_agent_name}` \(ID: `{escaped_agent_id}`\)
‚Ä¢ *Location:* `{escaped_location}`

*Full Log:*
```
{sanitized_full_log}
```
_This alert was generated by Wazuh\._
"""

    msg_data['text'] = message_text
    msg_data['parse_mode'] = 'MarkdownV2'

    headers = {'content-type': 'application/json', 'Accept-Charset': 'UTF-8'}

    # --- Send the Telegram Request ---
    try:
        response = requests.post(hook_url, headers=headers, data=json.dumps(msg_data))
        response.raise_for_status()
        print(f"Telegram message sent successfully! Response: {response.json()}")
    except requests.exceptions.RequestException as e:
        print(f"Error sending Telegram message: {e}", file=sys.stderr)
        if hasattr(e, 'response') and e.response is not None:
            print(f"Telegram API Response (Error): {e.response.text}", file=sys.stderr)
        sys.exit(1)

    sys.exit(0)
